//
//  Sector.cpp
//  cs409a2
//
//  Created by Vince Streibel on 2016-01-25.
//  Copyright Â© 2016 Brayden Streibel. All rights reserved.
//

#include "Sector.h"
#include <climits>

SectorId calculateSectorId(Vector3 p, int size)
{
    SectorId returnVal;
    returnVal.x = floor(p.x / size);
    returnVal.y = floor(p.y / size);
    returnVal.z = floor(p.z / size);
    return returnVal;
}

Vector3 calculateVector3(SectorId s, int size)
{
    Vector3 returnVal;
    returnVal.x = s.x * size;
    returnVal.y = s.y * size;
    returnVal.z = s.z * size;
    return returnVal;
}

Sector::Sector()
{
    //ObjModel particleModel;
    //particleModel.load("Models/RingParticleA0.obj");
    //particleModel_list = particleModel.getDisplayList();
}

Sector::~Sector()
{

    
}

void Sector::init(DisplayList d)
{
    particleModel_list = d;
}

void Sector::setId(SectorId id)
{
    this->id = id;
}

SectorId Sector::getId()
{
    return id;
}

void Sector::setDensity(int density)
{
    this->density = density;
}

int Sector::getDensity()
{
    return density;
}

void Sector::setSize(int size)
{
    this->size = size;
}

int Sector::getSize()
{
    return size;
}

void Sector::draw()
{
    calculateWorleyPoints();
    for (int i = 0; i < density; i++)
    {
        particleInfo pos = {
            (id.x + whorleyPoints[i].x) * size,
            (id.y + whorleyPoints[i].y) * size,
            (id.z + whorleyPoints[i].z) * size,
            pow(whorleyPoints[i].scale, 2) * 90 + 10
        };
        glPushMatrix();
            glTranslatef(pos.x, pos.y, pos.z);
            glScalef(pos.scale, pos.scale, pos.scale);
            particleModel_list.draw();
        glPopMatrix();
    }
}

Vector3 Sector::calculateSectorCentre()
{
    Vector3 p1(id.x * size,
               id.y * size,
               id.z * size);
    Vector3 p2((id.x * size) + size,
               (id.y * size) + size,
               (id.z * size) + size);
    Vector3 returnVal((p1.x + p2.x)/2,
                      (p1.y + p2.y)/2,
                      (p1.z + p2.z)/2);
    return returnVal;
}

unsigned int Sector::generateSeed()
{
    // Values generated by random.org
    unsigned int seed[] = {
        58573, 2320, 37321
    };
    unsigned int seed_x[] = {
        19718, 5247
    };
    unsigned int seed_y[] = {
        28914, 9802
    };
    unsigned int seed_z[] = {
        47531, 25389
    };
    
    int n = (id.x * seed_x[0]) ^ (id.y * seed_y[0]) ^ (id.z * seed_z[0]);
    unsigned int value = (((n * seed[2]) ^ seed[1]) * n) ^ seed[0] ^ (id.x * seed_x[1]) ^ (id.y * seed_y[1]) ^ (id.z * seed_z[1]);
    return value;
}

void Sector::calculateWorleyPoints()
{
    unsigned int r = generateSeed();
    for (int i = 0; i < density; i++)
    {
        whorleyPoints[i].x = (double)r/(double)UINT_MAX;
        
        r = xorshift(r);
        whorleyPoints[i].y = (double)r/(double)UINT_MAX;
        
        r = xorshift(r);
        whorleyPoints[i].z = (double)r/(double)UINT_MAX;
        
        r = xorshift(r);
        whorleyPoints[i].scale = (double)r/(double)UINT_MAX;
    }
}

unsigned int xorshift(unsigned int a)
{
    a ^= a << 13;
    a ^= a >> 17;
    a ^= a << 5;
    return a;
}


